esphome:
  name: rika-visio
  includes:
    - rika-visio.h
  libraries:
    - Servo
    - Wire
    - adafruit/Adafruit_VL53L0X @ ^1.2.2

esp8266:
  board: nodemcuv2
  restore_from_flash: true

api:
  encryption:
    key: !secret api_key_rika_visio

ota:
  password: !secret ota_pw_rika_visio

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Rika Visio Fallback Hotspot"
    password: !secret ap_pw_rika_visio

logger:

text_sensor:
  - platform: custom
    lambda: |-
      auto rv_status = new RVStatus();
      App.register_component(rv_status);
      return {rv_status->status};
    text_sensors:
      - name: "Rika Visio Status"

sensor:
  - platform: custom
    lambda: |-
      auto rv_intensity = new RVIntensity();
      App.register_component(rv_intensity);
      return {rv_intensity};
    sensors:
      name: "Rika Visio Intensity"
      unit_of_measurement: "%"
  - platform: custom
    lambda: |-
      auto rv_level = new RVLevel();
      App.register_component(rv_level);
      return {rv_level};
    sensors:
      name: "Rika Visio Level"
      unit_of_measurement: "%"

switch:
  - platform: custom
    lambda: |-
      auto rv_power_switch = new RVPowerSwitch();
      App.register_component(rv_power_switch);
      return {rv_power_switch};
    switches:
      name: "Rika Visio Power"
  - platform: custom
    lambda: |-
      auto rv_fan_switch = new RVFanSwitch();
      App.register_component(rv_fan_switch);
      return {rv_fan_switch};
    switches:
      name: "Rika Visio Fan"

custom_component:
  - lambda: |-
      auto rv_values = new RVValuesAPI();
      return {rv_values};
